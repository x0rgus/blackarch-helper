#!/usr/bin/env bash
#
# blackarch-helper
# Simple CLI helper for BlackArch tools
# Author: Lucas "x0rgus"
# License: MIT
# Repository: https://github.com/x0rgus/blackarch-helper
#
# --- Configuration ---
# Set VERBOSE to "false" by default. It can be overridden by a command-line flag.
VERBOSE=false

## --- Color and Symbol Configuration ---
COLOR_RESET=$'\033[0m'
COLOR_GREEN=$'\033[0;32m'
COLOR_YELLOW=$'\033[0;33m'
COLOR_RED=$'\033[0;31m'
COLOR_CYAN=$'\033[0;36m'
COLOR_BOLD=$'\033[1m'

# --- Logging Functions ---
# Helper functions to standardize message output.

einfo() { echo -e "${COLOR_GREEN}[INFO]${COLOR_RESET} $1"; }
ewarn() { echo -e "${COLOR_YELLOW}[WARN]${COLOR_RESET} $1"; } >&2
eerror() { echo -e "${COLOR_RED}[ERROR]${COLOR_RESET} $1"; } >&2
edie() { eerror "$1"; exit 1; }

# --- Core Functions ---

# Check if the BlackArch repository is configured in pacman.conf
check_blackarch_repo() {
    if ! grep -q '^\[blackarch\]' /etc/pacman.conf; then
        eerror "BlackArch repository not found in /etc/pacman.conf."
        echo -e "\nPlease follow the installation instructions at:"
        echo -e "${COLOR_CYAN}https://blackarch.org/guide.html${COLOR_RESET}\n"
        exit 1
    fi
}

# Check if fzf is installed
check_fzf() {
    if ! command -v fzf &>/dev/null; then
        edie "fzf not found. Please install it with: sudo pacman -S fzf"
    fi
}

# --- Logic Functions (Backend) ---

# List all available BlackArch categories, hiding stderr by default.
_list_all_categories() {
    pacman -Sg 2>/dev/null | grep '^blackarch-' | cut -d' ' -f1 | sort -u
}

# List all tools in the BlackArch repository, hiding stderr by default.
_list_all_tools() {
    pacman -Sgg 2>/dev/null | grep '^blackarch-' | cut -d' ' -f2 | sort -u
}

# List tools in a specific category, hiding stderr by default.
_list_tools_in_category() {
    pacman -Sg "$1" 2>/dev/null | awk '{print $2}'
}

# --- NEW: Verbose-aware Command Execution ---

# Shows a spinner while a command runs in the background.
# This provides user feedback without cluttering the terminal.
# Usage: _spinner "Your message..." command_to_run args...
_spinner() {
    local msg="$1"
    shift
    local cmd=("$@")
    local spinner_chars="/-\\|"
    
    # Run the command in the background
    "${cmd[@]}" &
    local pid=$!

    # Trap Ctrl+C to kill the background process
    trap 'kill $pid 2>/dev/null' SIGINT

    einfo "$msg"
    while kill -0 $pid 2>/dev/null; do
        for (( i=0; i<${#spinner_chars}; i++ )); do
            echo -ne "${COLOR_GREEN}[BUSY]${COLOR_RESET} ${spinner_chars:$i:1}\r"
            sleep 0.1
        done
    done
    echo -e "\r${COLOR_GREEN}[DONE]${COLOR_RESET} Operation finished.   " # Extra spaces to clear the line

    # Wait for the command to get its exit status
    wait $pid
    return $?
}

# Installs packages. If VERBOSE is true, shows all output.
# Otherwise, shows a spinner and hides the output.
# Usage: _install_packages package1 package2 ...
_install_packages() {
    if [[ "$VERBOSE" == "true" ]]; then
        einfo "Running installation in verbose mode..."
        # We use SC2086 here intentionally to allow word splitting for packages.
        # shellcheck disable=SC2086
        sudo pacman -S --needed --noconfirm "$@"
    else
        # Use the spinner for a clean UI
        _spinner "Installing packages (output hidden)..." sudo pacman -S --needed --noconfirm "$@" >/dev/null 2>&1
    fi

    if [[ $? -ne 0 ]]; then
        eerror "An error occurred during installation."
        ewarn "Try running with the --verbose flag to see detailed output."
        return 1
    fi
    return 0
}


# --- Subcommand Functions (User Interface) ---

# Handler for the 'category' command
handle_category() {
    local action="$1"
    local category_name="$2"

    case "$action" in
        list)
            einfo "Listing all BlackArch categories:"
            _list_all_categories
            ;;
        install)
            [[ -z "$category_name" ]] && edie "Usage: $0 category install <category-name>"
            einfo "Preparing to install all tools from the '$category_name' category..."
            # shellcheck disable=SC2046
            _install_packages $(_list_tools_in_category "$category_name")
            einfo "Installation of category '$category_name' complete."
            ;;
        *)
            eerror "Invalid subcommand for 'category'. Use 'list' or 'install'."
            usage
            exit 1
            ;;
    esac
}

# Handler for the 'tool' command
handle_tool() {
    local action="$1"
    local tool_name="$2"

    case "$action" in
        list)
            einfo "Listing all tools in the BlackArch repository..."
            _list_all_tools
            ;;
        search)
            [[ -z "$tool_name" ]] && edie "Usage: $0 tool search <keyword>"
            einfo "Searching for tools with the keyword '$tool_name':"
            _list_all_tools | grep -i --color=auto "$tool_name"
            ;;
        info)
            [[ -z "$tool_name" ]] && edie "Usage: $0 tool info <tool-name>"
            einfo "Displaying information for the tool '$tool_name':"
            # We don't hide output here, as the user explicitly asked for it.
            pacman -Si "$tool_name"
            ;;
        *)
            eerror "Invalid subcommand for 'tool'. Use 'list', 'search', or 'info'."
            usage
            exit 1
            ;;
    esac
}

# Interactive menu with FZF
interactive_menu() {
    check_fzf
    
    while true; do
        einfo "Select a category to explore (ESC to exit)"
        local category
        category=$(_list_all_categories | fzf --prompt="▶ Category: " --height=40% --border --header="Press ESC to exit the program.")
        
        [[ -z "$category" ]] && break

        while true; do
            einfo "Category: ${COLOR_CYAN}$category${COLOR_RESET}"
            local fzf_output
            fzf_output=$(_list_tools_in_category "$category" | fzf \
                --multi \
                --prompt="▶ Tool: " \
                --border \
                --header="Use TAB to select. ENTER to install, ESC to go back." \
                --expect=esc)

            [[ -z "$fzf_output" ]] && break 2

            local key_pressed
            key_pressed=$(head -n1 <<< "$fzf_output")
            
            if [[ "$key_pressed" == "esc" ]]; then
                break
            fi

            local selected_tools
            selected_tools=$(tail -n +2 <<< "$fzf_output")

            if [[ -z "$selected_tools" ]]; then
                ewarn "No tools selected. Press ESC to go back."
                sleep 1
                continue
            fi

            einfo "The following tools will be installed:"
            echo -e "${COLOR_CYAN}${selected_tools}${COLOR_RESET}"
            
            read -p $'\e[33m[WARN]\e[0m Do you want to proceed with the installation? (y/N) ' -n 1 -r reply
            echo

            if [[ "$reply" =~ ^[Yy]$ ]]; then
                # Use the new installation function
                _install_packages "${selected_tools}"
                einfo "Installation complete. Press any key to continue."
                read -n 1 -s
            else
                ewarn "Installation cancelled by the user."
            fi
            
            continue 
        done
    done

    einfo "Exiting blackarch-helper."
}

# Help/usage function
usage() {
    cat <<EOF

${COLOR_BOLD}blackarch-helper${COLOR_RESET}: A CLI tool to explore the BlackArch repository.

${COLOR_BOLD}USAGE:${COLOR_RESET}
    blackarch-helper [options] <command> <subcommand> [arguments]

${COLOR_BOLD}OPTIONS:${COLOR_RESET}
    ${COLOR_YELLOW}-v, --verbose${COLOR_RESET}   Enable verbose output for commands like installations.

${COLOR_BOLD}COMMANDS:${COLOR_RESET}
    ${COLOR_CYAN}category${COLOR_RESET}    Manage tool categories.
        ${COLOR_YELLOW}list${COLOR_RESET}          Lists all available categories.
        ${COLOR_YELLOW}install${COLOR_RESET} <cat>  Installs all tools from a category.

    ${COLOR_CYAN}tool${COLOR_RESET}        Manage individual tools.
        ${COLOR_YELLOW}list${COLOR_RESET}          Lists all tools in the repository.
        ${COLOR_YELLOW}search${COLOR_RESET}  <str>  Searches for tools by keyword.
        ${COLOR_YELLOW}info${COLOR_RESET}    <pkg>  Shows information about a tool (package).

    ${COLOR_CYAN}interactive${COLOR_RESET}   Opens an interactive FZF menu to explore categories and tools.
    ${COLOR_CYAN}help${COLOR_RESET}          Shows this help message.

${COLOR_BOLD}EXAMPLES:${COLOR_RESET}
    blackarch-helper category list
    blackarch-helper tool search nmap
    blackarch-helper --verbose tool info metasploit
    sudo blackarch-helper --verbose category install blackarch-scanner

EOF
}

# --- Main Execution ---

# Initial check
check_blackarch_repo

# --- NEW: Argument Parsing for Flags ---
# This loop handles flags like --verbose.
# It must come before the main command dispatcher.
# It iterates through arguments, sets flags, and removes them with 'shift'
# so they don't interfere with the positional command parsing later.
while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--verbose)
            VERBOSE=true
            shift # Remove --verbose from the list of arguments
            ;;
        *)
            # If it's not a known flag, stop parsing flags and break the loop.
            # The rest of the arguments will be handled by the command dispatcher.
            break
            ;;
    esac
done


# If no arguments are left after parsing flags, default to the interactive menu.
if [[ $# -eq 0 ]]; then
    interactive_menu
    exit 0
fi

# Command Dispatcher
case "$1" in
    category)
        # Pass the remaining arguments (from the second one on) to the handler
        handle_category "${@:2}"
        ;;
    tool)
        # Pass the remaining arguments (from the second one on) to the handler
        handle_tool "${@:2}"
        ;;
    interactive | fzf) # Keep 'fzf' as an alias
        interactive_menu
        ;;
    help | --help | -h)
        usage
        ;;
    *)
        eerror "Unknown command '$1'."
        # Simple "did you mean?". Just suggest the valid commands.
        echo -e "\nValid commands are: ${COLOR_CYAN}category, tool, interactive, help${COLOR_RESET}"
        exit 1
        ;;
esac